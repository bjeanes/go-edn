/[\r\n\t, ]+/			{ return tWhitespace	}
/\[/					{ return tOpenBracket	}
/\]/					{ return tCloseBracket	}
/{/						{ return tOpenBrace		}
/}/						{ return tCloseBrace	}
/\(/					{ return tOpenParen 	}
/\)/					{ return tCloseParen	}
/#/						{ return tOctothorpe	}
/\\newline/				{ lval.v = types.Character('\n'); return tCharacter }
/\\return/				{ lval.v = types.Character('\r'); return tCharacter }
/\\tab/					{ lval.v = types.Character('\t'); return tCharacter }
/\\space/				{ lval.v = types.Character(' ');  return tCharacter }
/\\[a-zA-Z0-9]/			{
							s := yylex.Text()[1:]
							ch, _, _ := strings.NewReader(s).ReadRune()
							lval.v = types.Character(ch)
							return tCharacter
						}
/:[a-zA-Z][a-zA-Z0-9]*/ {
							lval.v = types.Keyword(yylex.Text()[1:])
							return tKeyword
						}
/"(\\.|[^"\\])*"/   	{
							s := yylex.Text()
							lval.v = types.String(s[1:len(s)-1])
							return tString
						}
/./						{   // (This rule must be last)
							// Unmatched token...
							return -1 
						}
//

package edn

import "github.com/bjeanes/go-edn/types"

func init() {
	/* (this has to be in a func or lex doesn't write it out to final file)
	 *
	 * If this file is not lexer.nn, it was generated from lexer.nn and
	 * should not be edited directly.
	 *
	 */
}
